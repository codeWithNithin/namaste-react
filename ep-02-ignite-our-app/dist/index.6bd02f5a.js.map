{"mappings":"AAAA,0CAA0C;AAC1C,MAAM,UAAU,MAAM,aAAa,CACjC,MACA;IAAE,IAAI;AAAU,GAChB;AAGF,iCAAiC;AACjC,QAAQ,GAAG,CAAC;AAWZ,kHAAkH;AAClH,MAAM,SAAS,MAAM,aAAa,CAAC,OAAO;IAAE,IAAI;AAAS,GAAG;IAC1D,MAAM,aAAa,CAAC,OAAO;QAAE,IAAI;IAAQ,GAAG;QAC1C,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;QAC9B,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;KAC/B;IACD,MAAM,aAAa,CAAC,OAAO;QAAE,IAAI;IAAQ,GAAG;QAC1C,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;QAC9B,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;KAC/B;CACF;AAED,oDAAoD;AAEpD,MAAM,OAAO,SAAS,UAAU,CAAC,SAAS,cAAc,CAAC;AAEzD,gEAAgE;AAChE,KAAK,MAAM,CAAC","sources":["App.js"],"sourcesContent":["// To create element, we use createElement\r\nconst heading = React.createElement(\r\n  'h1',\r\n  { id: 'heading' },\r\n  'Hello World in React!!!'\r\n);\r\n\r\n// Below Result will be JS object\r\nconsole.log(heading);\r\n\r\n{\r\n  /* <div>\r\n<div>\r\n  <h1>I am h1 tag</h1>\r\n  <h2>I am h2 tag</h2>\r\n</div>\r\n</div> */\r\n}\r\n\r\n// So writing complex nested HTML elements using React Element is complicated, but with JSX we can write it easily\r\nconst parent = React.createElement('div', { id: 'parent' }, [\r\n  React.createElement('div', { id: 'child' }, [\r\n    React.createElement('h1', {}, 'I am h1 tag'),\r\n    React.createElement('h2', {}, 'I am h2 tag'),\r\n  ]),\r\n  React.createElement('div', { id: 'child' }, [\r\n    React.createElement('h1', {}, 'I am h1 tag'),\r\n    React.createElement('h2', {}, 'I am h2 tag'),\r\n  ]),\r\n]);\r\n\r\n// ReactElement(Object) => HTML(Browser Understands)\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// Takes the object, converts it into tag and puts it in the DOM\r\nroot.render(parent);\r\n"],"names":[],"version":3,"file":"index.6bd02f5a.js.map","sourceRoot":"/__parcel_source_root/"}